/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.chessapp;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.event.AncestorListener;

/**
 *
 * @author jehow
 */
public class ChessApp extends javax.swing.JFrame {

    Board board;
    ActionListener listener;
    Square tempSquare;
    Piece tempPiece;
    JButton tempBtn;
    int turn = 0;

    /**
     * Creates new form ChessApp
     */
    public ChessApp() {
        initComponents();
        setSize(800, 800);

        board = new Board();
        boardPanel.setVisible(true);
        listener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println(".actionPerformed()");
                JButton source = (JButton) e.getSource();
                source.setBackground(Color.red);
                String pos = source.getActionCommand();
                String[] thing = pos.split(",");
                int row = Integer.parseInt(thing[0]);
                int col = Integer.parseInt(thing[1]);
                System.out.println(row + "," + col);

                Square clickedSquare = board.getSquare(row, col);
                Piece clickedPiece = clickedSquare.getPiece();

                if (tempPiece != null) {
                    if (tempPiece.isMove(row, col)) {
                        tempPiece.setCol(col);
                        tempPiece.setRow(row);
                        clickedSquare.setPiece(tempPiece);
                        tempSquare.setPiece(null);

                        Image originalImage = tempPiece.getImage();
                        System.out.println(originalImage.getWidth(source));
                        Image scaledImage = originalImage.getScaledInstance(80, 80, Image.SCALE_SMOOTH);
                        System.out.println(scaledImage.getWidth(source));
                        source.setIcon(new ImageIcon(scaledImage));
                        tempBtn.setIcon(null);
                        tempPiece = null;
                        tempSquare = null;
                        if ((row + col) % 2 == 0) {
                            tempBtn.setBackground(new Color(240, 217, 181)); // white
                        } else {
                            tempBtn.setBackground(new Color(101, 67, 33)); // black
                        }
                        if ((row + col) % 2 == 0) {
                            source.setBackground(new Color(240, 217, 181)); // white
                        } else {
                            source.setBackground(new Color(101, 67, 33)); // black
                        }
                        tempBtn = null;
                        if (turn == 0) {
                            turn = 1;
                        } else if (turn == 1) {
                            turn = 0;
                        }
                        return;

                    } else {
                        tempPiece = null;
                        tempSquare = null;
                        tempBtn = null;
                        if ((row + col) % 2 == 0) {
                            tempBtn.setBackground(new Color(240, 217, 181)); // white
                        } else {
                            tempBtn.setBackground(new Color(101, 67, 33)); // black
                        }
                        if ((row + col) % 2 == 0) {
                            source.setBackground(new Color(240, 217, 181)); // white
                        } else {
                            source.setBackground(new Color(101, 67, 33)); // black
                        }
                    }
                }

                // if there is a piece in the selected square and as piece has been selected.
                if (tempPiece == null && clickedPiece != null) {
                    if ((turn == 0 && clickedPiece.getColor().equalsIgnoreCase("white")) || (turn == 1 && clickedPiece.getColor().equalsIgnoreCase("black"))) {
                        
                        tempPiece = clickedPiece;
                        tempSquare = clickedSquare;
                        tempBtn = source;
                    }

                }

            }
        };
        fillGrid();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boardPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(640, 640));

        boardPanel.setBackground(new java.awt.Color(0, 0, 0));
        boardPanel.setLayout(new java.awt.GridLayout());
        boardPanel.setLayout(new java.awt.GridLayout(8,8));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChessApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChessApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChessApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChessApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChessApp().setVisible(true);
//                ChessApp app = new ChessApp();
//                app.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//                app.createBoard(app.getContentPane());
//
//                app.setVisible(true);
            }
        });
    }

//    public void createBoard(final Container panel) {
//        boardPanel = new JPanel();
//        boardPanel.setLayout(layout);
//
//        JButton b = new JButton();
//        Dimension buttonSize = new Dimension(80, 80);
//        boardPanel.setPreferredSize(buttonSize);
//        for (int i = 0; i < 64; i++) {
//            boardPanel.add(new JButton());
//        }
//
//        panel.add(boardPanel);
//
//    }
    public void actionPerformed(ActionEvent btnPress) {
        String pos = btnPress.getActionCommand();
        System.out.println("Button Pressed at: " + pos);
    }

    public void fillGrid() {
        for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
                JButton square = new JButton();
                square.setVisible(true);
                square.setOpaque(true);
                square.setActionCommand(row + "," + col);
                square.addActionListener(listener);

                Square sq = board.getSquare(row, col);
                if (!(sq.getPiece() == null)) {
                    Piece p = sq.getPiece();
                    Image originalImage = p.getImage(); // Assuming this returns a java.awt.Image
                    Image scaledImage = originalImage.getScaledInstance(boardPanel.getHeight() / 8, boardPanel.getHeight() / 8, Image.SCALE_SMOOTH); // Adjust size as needed
                    square.setIcon(new ImageIcon(scaledImage));
                }

                // Example: alternate colors for board
                if ((row + col) % 2 == 0) {
                    square.setBackground(new Color(240, 217, 181)); // white
                } else {
                    square.setBackground(new Color(101, 67, 33)); // black
                }

                boardPanel.add(square);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boardPanel;
    // End of variables declaration//GEN-END:variables
}
